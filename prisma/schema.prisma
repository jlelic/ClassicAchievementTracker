generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model AchievementCategory {
    id              Int @id
    name            String
    parentId        Int?
    parent          AchievementCategory? @relation("AchievementCategoryParents", fields: [parentId], references: [id])
    children        AchievementCategory[] @relation("AchievementCategoryParents")
    achievements    Achievement[]
}

model Achievement {
    id              Int @id
    categoryId      Int
    category        AchievementCategory @relation(fields: [categoryId], references: [id])

    name            String
    description     String
    points          Int 	@db.SmallInt
    reward          String?
    icon            String?

    nextId          Int? @unique
    next            Achievement? @relation("AchievementNext", fields: [nextId], references: [id])
    previous        Achievement? @relation("AchievementNext")

    hidden          Boolean @default(false)

    earnedBy        PlayerAchievement[]

    isAlliance      Boolean
    isHorde         Boolean
}

model Character {
    id                  String  @id @default(cuid())
    name                String
    realm               String
    guild               String

    race                String
    class               String

    achievementPoints   Int
    achievementCount    Int
    achievements        PlayerAchievement[]
    lastUpdate          DateTime?

    @@unique([name, realm], map: "Character_name_realm_unique_constraint")
}

model PlayerAchievement {
    id                  String @id @default(cuid())
    characterId         String
    character           Character @relation(fields: [characterId], references: [id])
    achievementId       Int
    achievement         Achievement @relation(fields: [achievementId], references: [id])
    date                DateTime @db.Date

    @@unique([characterId, achievementId], map: "PlayerAchievement_character_achievement_constraint")
}
